package com.company;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.*;

class Main extends JFrame {

    final String name = "Сапёр";
    final String sign_flag = "x";
    final int block_size = 30;
    final int field_size = 15;
    final int field_DX = 15;
    final int field_DY = 28 + 17;
    final int initial_location = 0;
    final int viewing_digit = 1;
    final int put_flag = 3;
    final int number_mines = 32;
    final int[] color_numbers = {0x9000FF, 0x99999, 0xFF9000, 0xFF00FF, 0x09999};
    Cell[][] field = new Cell[field_size][field_size];
    Random random = new Random();
    int countOpenedCells;
    boolean youWon, bangMine;
    int bangX, bangY;

    public static void main(String[] args) {
        new Main();
    }

    Main() {
        setTitle(name);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setBounds(initial_location, initial_location, field_size * block_size + field_DX, field_size * block_size + field_DY);
        setResizable(true);
        final Canvas canvas = new Canvas();
        canvas.setBackground(Color.white);
        canvas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                super.mouseReleased(e);
                int x = e.getX()/block_size;
                int y = e.getY()/block_size;
                if (!bangMine && !youWon) {
                    if (e.getButton() == viewing_digit)
                        if (field[y][x].isNotOpen()) {
                            openCells(x, y);
                            youWon = countOpenedCells == field_size*field_size - number_mines;
                            if (bangMine) {
                                bangX = x;
                                bangY = y;
                            }
                        }
                    if (e.getButton() == put_flag) field[y][x].inverseFlag();
                    canvas.repaint();
                }
            }
        });
        add(BorderLayout.CENTER, canvas);
        setVisible(true);
        initField();
    }

    void openCells(int x, int y) {
        if (x < 0 || x > field_size - 1 || y < 0 || y > field_size - 1) return;
        if (!field[y][x].isNotOpen()) return;
        field[y][x].open();
        if (field[y][x].getCountBomb() > 0 || bangMine) return;
        for (int dx = -1; dx < 2; dx++)
            for (int dy = -1; dy < 2; dy++) openCells(x + dx, y + dy);
    }

    void initField() {
        int x, y, countMines = 0;
        for (x = 0; x < field_size; x++)
            for (y = 0; y < field_size; y++)
                field[y][x] = new Cell();
        while (countMines < number_mines) {
            do {
                x = random.nextInt(field_size);
                y = random.nextInt(field_size);
            } while (field[y][x].isMined());
            field[y][x].mine();
            countMines++;
        }
        for (x = 0; x < field_size; x++)
            for (y = 0; y < field_size; y++)
                if (!field[y][x].isMined()) {
                    int count = 0;
                    for (int dx = -1; dx < 2; dx++)
                        for (int dy = -1; dy < 2; dy++) {
                            int nX = x + dx;
                            int nY = y + dy;
                            if (nX < 0 || nY < 0 || nX > field_size - 1 || nY > field_size - 1) {
                                nX = x;
                                nY = y;
                            }
                            count += (field[nY][nX].isMined()) ? 1 : 0;
                        }
                    field[y][x].setCountBomb(count);
                }
    }

    class Cell {
        private int countBombNear;
        private boolean isOpen, isMine, isFlag;

        void open() {
            isOpen = true;
            bangMine = isMine;
            if (!isMine) countOpenedCells++;
        }

        void mine() { isMine = true; }

        void setCountBomb(int count) { countBombNear = count; }

        int getCountBomb() { return countBombNear; }

        boolean isNotOpen() { return !isOpen; }

        boolean isMined() { return isMine; }

        void inverseFlag() { isFlag = !isFlag; }

        void paintBomb(Graphics g, int x, int y, Color color) {
            g.setColor(color);
            g.fillRect(x*block_size + 5, y*block_size + 5, 20, 20);
        }

        void paintString(Graphics g, String str, int x, int y, Color color) {
            g.setColor(color);
            g.setFont(new Font("", Font.BOLD, block_size));
            g.drawString(str, x*block_size + 8, y*block_size + 26);
        }

        void paint(Graphics g, int x, int y) {
            g.setColor(Color.lightGray);
            g.drawRect(x*block_size, y*block_size, block_size, block_size);
            if (!isOpen) {
                if ((bangMine || youWon) && isMine) paintBomb(g, x, y, Color.black);
                else {
                    g.setColor(Color.lightGray);
                    g.fill3DRect(x*block_size, y*block_size, block_size, block_size, true);
                    if (isFlag) paintString(g, sign_flag, x, y, Color.green);
                }
            } else
            if (isMine) paintBomb(g, x, y, bangMine? Color.red : Color.black);
            else
            if (countBombNear > 0)
                paintString(g, Integer.toString(countBombNear), x, y, new Color(color_numbers[countBombNear - 1]));
        }
    }

    class Canvas extends JPanel {
        @Override
        public void paint(Graphics g) {
            super.paint(g);
            for (int x = 0; x < field_size; x++)
                for (int y = 0; y < field_size; y++) field[y][x].paint(g, x, y);
        }
    }
}
